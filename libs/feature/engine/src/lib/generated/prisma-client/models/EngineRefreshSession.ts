/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `EngineRefreshSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model EngineRefreshSession
 *
 */
export type EngineRefreshSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$EngineRefreshSessionPayload>;

export type AggregateEngineRefreshSession = {
  _count: EngineRefreshSessionCountAggregateOutputType | null;
  _min: EngineRefreshSessionMinAggregateOutputType | null;
  _max: EngineRefreshSessionMaxAggregateOutputType | null;
};

export type EngineRefreshSessionMinAggregateOutputType = {
  id: string | null;
  refreshToken: string | null;
  userAgent: string | null;
  fingerprint: string | null;
  userIp: string | null;
  expiresAt: Date | null;
  enabled: boolean | null;
  userId: string | null;
  projectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type EngineRefreshSessionMaxAggregateOutputType = {
  id: string | null;
  refreshToken: string | null;
  userAgent: string | null;
  fingerprint: string | null;
  userIp: string | null;
  expiresAt: Date | null;
  enabled: boolean | null;
  userId: string | null;
  projectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type EngineRefreshSessionCountAggregateOutputType = {
  id: number;
  refreshToken: number;
  userAgent: number;
  fingerprint: number;
  userIp: number;
  expiresAt: number;
  userData: number;
  enabled: number;
  userId: number;
  projectId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type EngineRefreshSessionMinAggregateInputType = {
  id?: true;
  refreshToken?: true;
  userAgent?: true;
  fingerprint?: true;
  userIp?: true;
  expiresAt?: true;
  enabled?: true;
  userId?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type EngineRefreshSessionMaxAggregateInputType = {
  id?: true;
  refreshToken?: true;
  userAgent?: true;
  fingerprint?: true;
  userIp?: true;
  expiresAt?: true;
  enabled?: true;
  userId?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type EngineRefreshSessionCountAggregateInputType = {
  id?: true;
  refreshToken?: true;
  userAgent?: true;
  fingerprint?: true;
  userIp?: true;
  expiresAt?: true;
  userData?: true;
  enabled?: true;
  userId?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type EngineRefreshSessionAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which EngineRefreshSession to aggregate.
   */
  where?: Prisma.EngineRefreshSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EngineRefreshSessions to fetch.
   */
  orderBy?: Prisma.EngineRefreshSessionOrderByWithRelationInput | Prisma.EngineRefreshSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.EngineRefreshSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EngineRefreshSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EngineRefreshSessions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned EngineRefreshSessions
   **/
  _count?: true | EngineRefreshSessionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: EngineRefreshSessionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: EngineRefreshSessionMaxAggregateInputType;
};

export type GetEngineRefreshSessionAggregateType<T extends EngineRefreshSessionAggregateArgs> = {
  [P in keyof T & keyof AggregateEngineRefreshSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEngineRefreshSession[P]>
    : Prisma.GetScalarType<T[P], AggregateEngineRefreshSession[P]>;
};

export type EngineRefreshSessionGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.EngineRefreshSessionWhereInput;
  orderBy?:
    | Prisma.EngineRefreshSessionOrderByWithAggregationInput
    | Prisma.EngineRefreshSessionOrderByWithAggregationInput[];
  by: Prisma.EngineRefreshSessionScalarFieldEnum[] | Prisma.EngineRefreshSessionScalarFieldEnum;
  having?: Prisma.EngineRefreshSessionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: EngineRefreshSessionCountAggregateInputType | true;
  _min?: EngineRefreshSessionMinAggregateInputType;
  _max?: EngineRefreshSessionMaxAggregateInputType;
};

export type EngineRefreshSessionGroupByOutputType = {
  id: string;
  refreshToken: string;
  userAgent: string | null;
  fingerprint: string | null;
  userIp: string | null;
  expiresAt: Date | null;
  userData: runtime.JsonValue | null;
  enabled: boolean;
  userId: string;
  projectId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: EngineRefreshSessionCountAggregateOutputType | null;
  _min: EngineRefreshSessionMinAggregateOutputType | null;
  _max: EngineRefreshSessionMaxAggregateOutputType | null;
};

type GetEngineRefreshSessionGroupByPayload<T extends EngineRefreshSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EngineRefreshSessionGroupByOutputType, T['by']> & {
      [P in keyof T & keyof EngineRefreshSessionGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], EngineRefreshSessionGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], EngineRefreshSessionGroupByOutputType[P]>;
    }
  >
>;

export type EngineRefreshSessionWhereInput = {
  AND?: Prisma.EngineRefreshSessionWhereInput | Prisma.EngineRefreshSessionWhereInput[];
  OR?: Prisma.EngineRefreshSessionWhereInput[];
  NOT?: Prisma.EngineRefreshSessionWhereInput | Prisma.EngineRefreshSessionWhereInput[];
  id?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  refreshToken?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  userAgent?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
  fingerprint?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
  userIp?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
  expiresAt?: Prisma.DateTimeNullableFilter<'EngineRefreshSession'> | Date | string | null;
  userData?: Prisma.JsonNullableFilter<'EngineRefreshSession'>;
  enabled?: Prisma.BoolFilter<'EngineRefreshSession'> | boolean;
  userId?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  projectId?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  createdAt?: Prisma.DateTimeFilter<'EngineRefreshSession'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'EngineRefreshSession'> | Date | string;
  EngineProject?: Prisma.XOR<Prisma.EngineProjectScalarRelationFilter, Prisma.EngineProjectWhereInput>;
  EngineUser?: Prisma.XOR<Prisma.EngineUserScalarRelationFilter, Prisma.EngineUserWhereInput>;
};

export type EngineRefreshSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  refreshToken?: Prisma.SortOrder;
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder;
  fingerprint?: Prisma.SortOrderInput | Prisma.SortOrder;
  userIp?: Prisma.SortOrderInput | Prisma.SortOrder;
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  userData?: Prisma.SortOrderInput | Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  EngineProject?: Prisma.EngineProjectOrderByWithRelationInput;
  EngineUser?: Prisma.EngineUserOrderByWithRelationInput;
};

export type EngineRefreshSessionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.EngineRefreshSessionWhereInput | Prisma.EngineRefreshSessionWhereInput[];
    OR?: Prisma.EngineRefreshSessionWhereInput[];
    NOT?: Prisma.EngineRefreshSessionWhereInput | Prisma.EngineRefreshSessionWhereInput[];
    refreshToken?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
    userAgent?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
    fingerprint?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
    userIp?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
    expiresAt?: Prisma.DateTimeNullableFilter<'EngineRefreshSession'> | Date | string | null;
    userData?: Prisma.JsonNullableFilter<'EngineRefreshSession'>;
    enabled?: Prisma.BoolFilter<'EngineRefreshSession'> | boolean;
    userId?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
    projectId?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
    createdAt?: Prisma.DateTimeFilter<'EngineRefreshSession'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'EngineRefreshSession'> | Date | string;
    EngineProject?: Prisma.XOR<Prisma.EngineProjectScalarRelationFilter, Prisma.EngineProjectWhereInput>;
    EngineUser?: Prisma.XOR<Prisma.EngineUserScalarRelationFilter, Prisma.EngineUserWhereInput>;
  },
  'id'
>;

export type EngineRefreshSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  refreshToken?: Prisma.SortOrder;
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder;
  fingerprint?: Prisma.SortOrderInput | Prisma.SortOrder;
  userIp?: Prisma.SortOrderInput | Prisma.SortOrder;
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  userData?: Prisma.SortOrderInput | Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.EngineRefreshSessionCountOrderByAggregateInput;
  _max?: Prisma.EngineRefreshSessionMaxOrderByAggregateInput;
  _min?: Prisma.EngineRefreshSessionMinOrderByAggregateInput;
};

export type EngineRefreshSessionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.EngineRefreshSessionScalarWhereWithAggregatesInput
    | Prisma.EngineRefreshSessionScalarWhereWithAggregatesInput[];
  OR?: Prisma.EngineRefreshSessionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.EngineRefreshSessionScalarWhereWithAggregatesInput
    | Prisma.EngineRefreshSessionScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'EngineRefreshSession'> | string;
  refreshToken?: Prisma.UuidWithAggregatesFilter<'EngineRefreshSession'> | string;
  userAgent?: Prisma.StringNullableWithAggregatesFilter<'EngineRefreshSession'> | string | null;
  fingerprint?: Prisma.StringNullableWithAggregatesFilter<'EngineRefreshSession'> | string | null;
  userIp?: Prisma.StringNullableWithAggregatesFilter<'EngineRefreshSession'> | string | null;
  expiresAt?: Prisma.DateTimeNullableWithAggregatesFilter<'EngineRefreshSession'> | Date | string | null;
  userData?: Prisma.JsonNullableWithAggregatesFilter<'EngineRefreshSession'>;
  enabled?: Prisma.BoolWithAggregatesFilter<'EngineRefreshSession'> | boolean;
  userId?: Prisma.UuidWithAggregatesFilter<'EngineRefreshSession'> | string;
  projectId?: Prisma.UuidWithAggregatesFilter<'EngineRefreshSession'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'EngineRefreshSession'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'EngineRefreshSession'> | Date | string;
};

export type EngineRefreshSessionCreateInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  EngineProject: Prisma.EngineProjectCreateNestedOneWithoutEngineRefreshSessionInput;
  EngineUser: Prisma.EngineUserCreateNestedOneWithoutEngineRefreshSessionInput;
};

export type EngineRefreshSessionUncheckedCreateInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  userId: string;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type EngineRefreshSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  EngineProject?: Prisma.EngineProjectUpdateOneRequiredWithoutEngineRefreshSessionNestedInput;
  EngineUser?: Prisma.EngineUserUpdateOneRequiredWithoutEngineRefreshSessionNestedInput;
};

export type EngineRefreshSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EngineRefreshSessionCreateManyInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  userId: string;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type EngineRefreshSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EngineRefreshSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EngineRefreshSessionListRelationFilter = {
  every?: Prisma.EngineRefreshSessionWhereInput;
  some?: Prisma.EngineRefreshSessionWhereInput;
  none?: Prisma.EngineRefreshSessionWhereInput;
};

export type EngineRefreshSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type EngineRefreshSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  refreshToken?: Prisma.SortOrder;
  userAgent?: Prisma.SortOrder;
  fingerprint?: Prisma.SortOrder;
  userIp?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  userData?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type EngineRefreshSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  refreshToken?: Prisma.SortOrder;
  userAgent?: Prisma.SortOrder;
  fingerprint?: Prisma.SortOrder;
  userIp?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type EngineRefreshSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  refreshToken?: Prisma.SortOrder;
  userAgent?: Prisma.SortOrder;
  fingerprint?: Prisma.SortOrder;
  userIp?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type EngineRefreshSessionCreateNestedManyWithoutEngineProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineProjectInputEnvelope;
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
};

export type EngineRefreshSessionUncheckedCreateNestedManyWithoutEngineProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineProjectInputEnvelope;
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
};

export type EngineRefreshSessionUpdateManyWithoutEngineProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput[];
  upsert?:
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineProjectInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineProjectInputEnvelope;
  set?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  disconnect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  delete?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  update?:
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineProjectInput[];
  updateMany?:
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineProjectInput[];
  deleteMany?: Prisma.EngineRefreshSessionScalarWhereInput | Prisma.EngineRefreshSessionScalarWhereInput[];
};

export type EngineRefreshSessionUncheckedUpdateManyWithoutEngineProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput[];
  upsert?:
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineProjectInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineProjectInputEnvelope;
  set?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  disconnect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  delete?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  update?:
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineProjectInput[];
  updateMany?:
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineProjectInput
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineProjectInput[];
  deleteMany?: Prisma.EngineRefreshSessionScalarWhereInput | Prisma.EngineRefreshSessionScalarWhereInput[];
};

export type EngineRefreshSessionCreateNestedManyWithoutEngineUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineUserInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineUserInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineUserInputEnvelope;
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
};

export type EngineRefreshSessionUncheckedCreateNestedManyWithoutEngineUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineUserInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineUserInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineUserInputEnvelope;
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
};

export type EngineRefreshSessionUpdateManyWithoutEngineUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineUserInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineUserInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput[];
  upsert?:
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineUserInput
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineUserInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineUserInputEnvelope;
  set?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  disconnect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  delete?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  update?:
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineUserInput
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineUserInput[];
  updateMany?:
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineUserInput
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineUserInput[];
  deleteMany?: Prisma.EngineRefreshSessionScalarWhereInput | Prisma.EngineRefreshSessionScalarWhereInput[];
};

export type EngineRefreshSessionUncheckedUpdateManyWithoutEngineUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EngineRefreshSessionCreateWithoutEngineUserInput,
        Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput
      >
    | Prisma.EngineRefreshSessionCreateWithoutEngineUserInput[]
    | Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput[];
  connectOrCreate?:
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput
    | Prisma.EngineRefreshSessionCreateOrConnectWithoutEngineUserInput[];
  upsert?:
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineUserInput
    | Prisma.EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineUserInput[];
  createMany?: Prisma.EngineRefreshSessionCreateManyEngineUserInputEnvelope;
  set?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  disconnect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  delete?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  connect?: Prisma.EngineRefreshSessionWhereUniqueInput | Prisma.EngineRefreshSessionWhereUniqueInput[];
  update?:
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineUserInput
    | Prisma.EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineUserInput[];
  updateMany?:
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineUserInput
    | Prisma.EngineRefreshSessionUpdateManyWithWhereWithoutEngineUserInput[];
  deleteMany?: Prisma.EngineRefreshSessionScalarWhereInput | Prisma.EngineRefreshSessionScalarWhereInput[];
};

export type EngineRefreshSessionCreateWithoutEngineProjectInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  EngineUser: Prisma.EngineUserCreateNestedOneWithoutEngineRefreshSessionInput;
};

export type EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type EngineRefreshSessionCreateOrConnectWithoutEngineProjectInput = {
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput,
    Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput
  >;
};

export type EngineRefreshSessionCreateManyEngineProjectInputEnvelope = {
  data:
    | Prisma.EngineRefreshSessionCreateManyEngineProjectInput
    | Prisma.EngineRefreshSessionCreateManyEngineProjectInput[];
  skipDuplicates?: boolean;
};

export type EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineProjectInput = {
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateWithoutEngineProjectInput,
    Prisma.EngineRefreshSessionUncheckedUpdateWithoutEngineProjectInput
  >;
  create: Prisma.XOR<
    Prisma.EngineRefreshSessionCreateWithoutEngineProjectInput,
    Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineProjectInput
  >;
};

export type EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineProjectInput = {
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateWithoutEngineProjectInput,
    Prisma.EngineRefreshSessionUncheckedUpdateWithoutEngineProjectInput
  >;
};

export type EngineRefreshSessionUpdateManyWithWhereWithoutEngineProjectInput = {
  where: Prisma.EngineRefreshSessionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateManyMutationInput,
    Prisma.EngineRefreshSessionUncheckedUpdateManyWithoutEngineProjectInput
  >;
};

export type EngineRefreshSessionScalarWhereInput = {
  AND?: Prisma.EngineRefreshSessionScalarWhereInput | Prisma.EngineRefreshSessionScalarWhereInput[];
  OR?: Prisma.EngineRefreshSessionScalarWhereInput[];
  NOT?: Prisma.EngineRefreshSessionScalarWhereInput | Prisma.EngineRefreshSessionScalarWhereInput[];
  id?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  refreshToken?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  userAgent?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
  fingerprint?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
  userIp?: Prisma.StringNullableFilter<'EngineRefreshSession'> | string | null;
  expiresAt?: Prisma.DateTimeNullableFilter<'EngineRefreshSession'> | Date | string | null;
  userData?: Prisma.JsonNullableFilter<'EngineRefreshSession'>;
  enabled?: Prisma.BoolFilter<'EngineRefreshSession'> | boolean;
  userId?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  projectId?: Prisma.UuidFilter<'EngineRefreshSession'> | string;
  createdAt?: Prisma.DateTimeFilter<'EngineRefreshSession'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'EngineRefreshSession'> | Date | string;
};

export type EngineRefreshSessionCreateWithoutEngineUserInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  EngineProject: Prisma.EngineProjectCreateNestedOneWithoutEngineRefreshSessionInput;
};

export type EngineRefreshSessionUncheckedCreateWithoutEngineUserInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type EngineRefreshSessionCreateOrConnectWithoutEngineUserInput = {
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.EngineRefreshSessionCreateWithoutEngineUserInput,
    Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput
  >;
};

export type EngineRefreshSessionCreateManyEngineUserInputEnvelope = {
  data: Prisma.EngineRefreshSessionCreateManyEngineUserInput | Prisma.EngineRefreshSessionCreateManyEngineUserInput[];
  skipDuplicates?: boolean;
};

export type EngineRefreshSessionUpsertWithWhereUniqueWithoutEngineUserInput = {
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateWithoutEngineUserInput,
    Prisma.EngineRefreshSessionUncheckedUpdateWithoutEngineUserInput
  >;
  create: Prisma.XOR<
    Prisma.EngineRefreshSessionCreateWithoutEngineUserInput,
    Prisma.EngineRefreshSessionUncheckedCreateWithoutEngineUserInput
  >;
};

export type EngineRefreshSessionUpdateWithWhereUniqueWithoutEngineUserInput = {
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateWithoutEngineUserInput,
    Prisma.EngineRefreshSessionUncheckedUpdateWithoutEngineUserInput
  >;
};

export type EngineRefreshSessionUpdateManyWithWhereWithoutEngineUserInput = {
  where: Prisma.EngineRefreshSessionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateManyMutationInput,
    Prisma.EngineRefreshSessionUncheckedUpdateManyWithoutEngineUserInput
  >;
};

export type EngineRefreshSessionCreateManyEngineProjectInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  userId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type EngineRefreshSessionUpdateWithoutEngineProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  EngineUser?: Prisma.EngineUserUpdateOneRequiredWithoutEngineRefreshSessionNestedInput;
};

export type EngineRefreshSessionUncheckedUpdateWithoutEngineProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EngineRefreshSessionUncheckedUpdateManyWithoutEngineProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EngineRefreshSessionCreateManyEngineUserInput = {
  id?: string;
  refreshToken: string;
  userAgent?: string | null;
  fingerprint?: string | null;
  userIp?: string | null;
  expiresAt?: Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled: boolean;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type EngineRefreshSessionUpdateWithoutEngineUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  EngineProject?: Prisma.EngineProjectUpdateOneRequiredWithoutEngineRefreshSessionNestedInput;
};

export type EngineRefreshSessionUncheckedUpdateWithoutEngineUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EngineRefreshSessionUncheckedUpdateManyWithoutEngineUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  refreshToken?: Prisma.StringFieldUpdateOperationsInput | string;
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  fingerprint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  userData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EngineRefreshSessionSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    refreshToken?: boolean;
    userAgent?: boolean;
    fingerprint?: boolean;
    userIp?: boolean;
    expiresAt?: boolean;
    userData?: boolean;
    enabled?: boolean;
    userId?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    EngineProject?: boolean | Prisma.EngineProjectDefaultArgs<ExtArgs>;
    EngineUser?: boolean | Prisma.EngineUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['engineRefreshSession']
>;

export type EngineRefreshSessionSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    refreshToken?: boolean;
    userAgent?: boolean;
    fingerprint?: boolean;
    userIp?: boolean;
    expiresAt?: boolean;
    userData?: boolean;
    enabled?: boolean;
    userId?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    EngineProject?: boolean | Prisma.EngineProjectDefaultArgs<ExtArgs>;
    EngineUser?: boolean | Prisma.EngineUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['engineRefreshSession']
>;

export type EngineRefreshSessionSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    refreshToken?: boolean;
    userAgent?: boolean;
    fingerprint?: boolean;
    userIp?: boolean;
    expiresAt?: boolean;
    userData?: boolean;
    enabled?: boolean;
    userId?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    EngineProject?: boolean | Prisma.EngineProjectDefaultArgs<ExtArgs>;
    EngineUser?: boolean | Prisma.EngineUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['engineRefreshSession']
>;

export type EngineRefreshSessionSelectScalar = {
  id?: boolean;
  refreshToken?: boolean;
  userAgent?: boolean;
  fingerprint?: boolean;
  userIp?: boolean;
  expiresAt?: boolean;
  userData?: boolean;
  enabled?: boolean;
  userId?: boolean;
  projectId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type EngineRefreshSessionOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'refreshToken'
  | 'userAgent'
  | 'fingerprint'
  | 'userIp'
  | 'expiresAt'
  | 'userData'
  | 'enabled'
  | 'userId'
  | 'projectId'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['engineRefreshSession']
>;
export type EngineRefreshSessionInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  EngineProject?: boolean | Prisma.EngineProjectDefaultArgs<ExtArgs>;
  EngineUser?: boolean | Prisma.EngineUserDefaultArgs<ExtArgs>;
};
export type EngineRefreshSessionIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  EngineProject?: boolean | Prisma.EngineProjectDefaultArgs<ExtArgs>;
  EngineUser?: boolean | Prisma.EngineUserDefaultArgs<ExtArgs>;
};
export type EngineRefreshSessionIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  EngineProject?: boolean | Prisma.EngineProjectDefaultArgs<ExtArgs>;
  EngineUser?: boolean | Prisma.EngineUserDefaultArgs<ExtArgs>;
};

export type $EngineRefreshSessionPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'EngineRefreshSession';
  objects: {
    EngineProject: Prisma.$EngineProjectPayload<ExtArgs>;
    EngineUser: Prisma.$EngineUserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      /**
       * @DtoEntityHidden
       */
      refreshToken: string;
      userAgent: string | null;
      /**
       * @DtoEntityHidden
       */
      fingerprint: string | null;
      userIp: string | null;
      expiresAt: Date | null;
      userData: runtime.JsonValue | null;
      enabled: boolean;
      userId: string;
      projectId: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
    },
    ExtArgs['result']['engineRefreshSession']
  >;
  composites: {};
};

export type EngineRefreshSessionGetPayload<S extends boolean | null | undefined | EngineRefreshSessionDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$EngineRefreshSessionPayload, S>;

export type EngineRefreshSessionCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<EngineRefreshSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: EngineRefreshSessionCountAggregateInputType | true;
};

export interface EngineRefreshSessionDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['EngineRefreshSession'];
    meta: { name: 'EngineRefreshSession' };
  };
  /**
   * Find zero or one EngineRefreshSession that matches the filter.
   * @param {EngineRefreshSessionFindUniqueArgs} args - Arguments to find a EngineRefreshSession
   * @example
   * // Get one EngineRefreshSession
   * const engineRefreshSession = await prisma.engineRefreshSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EngineRefreshSessionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$EngineRefreshSessionPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one EngineRefreshSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EngineRefreshSessionFindUniqueOrThrowArgs} args - Arguments to find a EngineRefreshSession
   * @example
   * // Get one EngineRefreshSession
   * const engineRefreshSession = await prisma.engineRefreshSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EngineRefreshSessionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$EngineRefreshSessionPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first EngineRefreshSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EngineRefreshSessionFindFirstArgs} args - Arguments to find a EngineRefreshSession
   * @example
   * // Get one EngineRefreshSession
   * const engineRefreshSession = await prisma.engineRefreshSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EngineRefreshSessionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, EngineRefreshSessionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$EngineRefreshSessionPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first EngineRefreshSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EngineRefreshSessionFindFirstOrThrowArgs} args - Arguments to find a EngineRefreshSession
   * @example
   * // Get one EngineRefreshSession
   * const engineRefreshSession = await prisma.engineRefreshSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EngineRefreshSessionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, EngineRefreshSessionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<
      Prisma.$EngineRefreshSessionPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more EngineRefreshSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EngineRefreshSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EngineRefreshSessions
   * const engineRefreshSessions = await prisma.engineRefreshSession.findMany()
   *
   * // Get first 10 EngineRefreshSessions
   * const engineRefreshSessions = await prisma.engineRefreshSession.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const engineRefreshSessionWithIdOnly = await prisma.engineRefreshSession.findMany({ select: { id: true } })
   *
   */
  findMany<T extends EngineRefreshSessionFindManyArgs>(
    args?: Prisma.SelectSubset<T, EngineRefreshSessionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$EngineRefreshSessionPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
  >;

  /**
   * Create a EngineRefreshSession.
   * @param {EngineRefreshSessionCreateArgs} args - Arguments to create a EngineRefreshSession.
   * @example
   * // Create one EngineRefreshSession
   * const EngineRefreshSession = await prisma.engineRefreshSession.create({
   *   data: {
   *     // ... data to create a EngineRefreshSession
   *   }
   * })
   *
   */
  create<T extends EngineRefreshSessionCreateArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<Prisma.$EngineRefreshSessionPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many EngineRefreshSessions.
   * @param {EngineRefreshSessionCreateManyArgs} args - Arguments to create many EngineRefreshSessions.
   * @example
   * // Create many EngineRefreshSessions
   * const engineRefreshSession = await prisma.engineRefreshSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends EngineRefreshSessionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, EngineRefreshSessionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many EngineRefreshSessions and returns the data saved in the database.
   * @param {EngineRefreshSessionCreateManyAndReturnArgs} args - Arguments to create many EngineRefreshSessions.
   * @example
   * // Create many EngineRefreshSessions
   * const engineRefreshSession = await prisma.engineRefreshSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many EngineRefreshSessions and only return the `id`
   * const engineRefreshSessionWithIdOnly = await prisma.engineRefreshSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends EngineRefreshSessionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, EngineRefreshSessionCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EngineRefreshSessionPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a EngineRefreshSession.
   * @param {EngineRefreshSessionDeleteArgs} args - Arguments to delete one EngineRefreshSession.
   * @example
   * // Delete one EngineRefreshSession
   * const EngineRefreshSession = await prisma.engineRefreshSession.delete({
   *   where: {
   *     // ... filter to delete one EngineRefreshSession
   *   }
   * })
   *
   */
  delete<T extends EngineRefreshSessionDeleteArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<Prisma.$EngineRefreshSessionPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one EngineRefreshSession.
   * @param {EngineRefreshSessionUpdateArgs} args - Arguments to update one EngineRefreshSession.
   * @example
   * // Update one EngineRefreshSession
   * const engineRefreshSession = await prisma.engineRefreshSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends EngineRefreshSessionUpdateArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<Prisma.$EngineRefreshSessionPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more EngineRefreshSessions.
   * @param {EngineRefreshSessionDeleteManyArgs} args - Arguments to filter EngineRefreshSessions to delete.
   * @example
   * // Delete a few EngineRefreshSessions
   * const { count } = await prisma.engineRefreshSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends EngineRefreshSessionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, EngineRefreshSessionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more EngineRefreshSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EngineRefreshSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EngineRefreshSessions
   * const engineRefreshSession = await prisma.engineRefreshSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends EngineRefreshSessionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more EngineRefreshSessions and returns the data updated in the database.
   * @param {EngineRefreshSessionUpdateManyAndReturnArgs} args - Arguments to update many EngineRefreshSessions.
   * @example
   * // Update many EngineRefreshSessions
   * const engineRefreshSession = await prisma.engineRefreshSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more EngineRefreshSessions and only return the `id`
   * const engineRefreshSessionWithIdOnly = await prisma.engineRefreshSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends EngineRefreshSessionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EngineRefreshSessionPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one EngineRefreshSession.
   * @param {EngineRefreshSessionUpsertArgs} args - Arguments to update or create a EngineRefreshSession.
   * @example
   * // Update or create a EngineRefreshSession
   * const engineRefreshSession = await prisma.engineRefreshSession.upsert({
   *   create: {
   *     // ... data to create a EngineRefreshSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EngineRefreshSession we want to update
   *   }
   * })
   */
  upsert<T extends EngineRefreshSessionUpsertArgs>(
    args: Prisma.SelectSubset<T, EngineRefreshSessionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineRefreshSessionClient<
    runtime.Types.Result.GetResult<Prisma.$EngineRefreshSessionPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of EngineRefreshSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EngineRefreshSessionCountArgs} args - Arguments to filter EngineRefreshSessions to count.
   * @example
   * // Count the number of EngineRefreshSessions
   * const count = await prisma.engineRefreshSession.count({
   *   where: {
   *     // ... the filter for the EngineRefreshSessions we want to count
   *   }
   * })
   **/
  count<T extends EngineRefreshSessionCountArgs>(
    args?: Prisma.Subset<T, EngineRefreshSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EngineRefreshSessionCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a EngineRefreshSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EngineRefreshSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends EngineRefreshSessionAggregateArgs>(
    args: Prisma.Subset<T, EngineRefreshSessionAggregateArgs>,
  ): Prisma.PrismaPromise<GetEngineRefreshSessionAggregateType<T>>;

  /**
   * Group by EngineRefreshSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EngineRefreshSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends EngineRefreshSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EngineRefreshSessionGroupByArgs['orderBy'] }
      : { orderBy?: EngineRefreshSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, EngineRefreshSessionGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetEngineRefreshSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the EngineRefreshSession model
   */
  readonly fields: EngineRefreshSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EngineRefreshSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EngineRefreshSessionClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  EngineProject<T extends Prisma.EngineProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.EngineProjectDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineProjectClient<
    | runtime.Types.Result.GetResult<Prisma.$EngineProjectPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  EngineUser<T extends Prisma.EngineUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.EngineUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__EngineUserClient<
    | runtime.Types.Result.GetResult<Prisma.$EngineUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the EngineRefreshSession model
 */
export interface EngineRefreshSessionFieldRefs {
  readonly id: Prisma.FieldRef<'EngineRefreshSession', 'String'>;
  readonly refreshToken: Prisma.FieldRef<'EngineRefreshSession', 'String'>;
  readonly userAgent: Prisma.FieldRef<'EngineRefreshSession', 'String'>;
  readonly fingerprint: Prisma.FieldRef<'EngineRefreshSession', 'String'>;
  readonly userIp: Prisma.FieldRef<'EngineRefreshSession', 'String'>;
  readonly expiresAt: Prisma.FieldRef<'EngineRefreshSession', 'DateTime'>;
  readonly userData: Prisma.FieldRef<'EngineRefreshSession', 'Json'>;
  readonly enabled: Prisma.FieldRef<'EngineRefreshSession', 'Boolean'>;
  readonly userId: Prisma.FieldRef<'EngineRefreshSession', 'String'>;
  readonly projectId: Prisma.FieldRef<'EngineRefreshSession', 'String'>;
  readonly createdAt: Prisma.FieldRef<'EngineRefreshSession', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'EngineRefreshSession', 'DateTime'>;
}

// Custom InputTypes
/**
 * EngineRefreshSession findUnique
 */
export type EngineRefreshSessionFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * Filter, which EngineRefreshSession to fetch.
   */
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
};

/**
 * EngineRefreshSession findUniqueOrThrow
 */
export type EngineRefreshSessionFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * Filter, which EngineRefreshSession to fetch.
   */
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
};

/**
 * EngineRefreshSession findFirst
 */
export type EngineRefreshSessionFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * Filter, which EngineRefreshSession to fetch.
   */
  where?: Prisma.EngineRefreshSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EngineRefreshSessions to fetch.
   */
  orderBy?: Prisma.EngineRefreshSessionOrderByWithRelationInput | Prisma.EngineRefreshSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for EngineRefreshSessions.
   */
  cursor?: Prisma.EngineRefreshSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EngineRefreshSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EngineRefreshSessions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of EngineRefreshSessions.
   */
  distinct?: Prisma.EngineRefreshSessionScalarFieldEnum | Prisma.EngineRefreshSessionScalarFieldEnum[];
};

/**
 * EngineRefreshSession findFirstOrThrow
 */
export type EngineRefreshSessionFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * Filter, which EngineRefreshSession to fetch.
   */
  where?: Prisma.EngineRefreshSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EngineRefreshSessions to fetch.
   */
  orderBy?: Prisma.EngineRefreshSessionOrderByWithRelationInput | Prisma.EngineRefreshSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for EngineRefreshSessions.
   */
  cursor?: Prisma.EngineRefreshSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EngineRefreshSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EngineRefreshSessions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of EngineRefreshSessions.
   */
  distinct?: Prisma.EngineRefreshSessionScalarFieldEnum | Prisma.EngineRefreshSessionScalarFieldEnum[];
};

/**
 * EngineRefreshSession findMany
 */
export type EngineRefreshSessionFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * Filter, which EngineRefreshSessions to fetch.
   */
  where?: Prisma.EngineRefreshSessionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of EngineRefreshSessions to fetch.
   */
  orderBy?: Prisma.EngineRefreshSessionOrderByWithRelationInput | Prisma.EngineRefreshSessionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing EngineRefreshSessions.
   */
  cursor?: Prisma.EngineRefreshSessionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` EngineRefreshSessions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` EngineRefreshSessions.
   */
  skip?: number;
  distinct?: Prisma.EngineRefreshSessionScalarFieldEnum | Prisma.EngineRefreshSessionScalarFieldEnum[];
};

/**
 * EngineRefreshSession create
 */
export type EngineRefreshSessionCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * The data needed to create a EngineRefreshSession.
   */
  data: Prisma.XOR<Prisma.EngineRefreshSessionCreateInput, Prisma.EngineRefreshSessionUncheckedCreateInput>;
};

/**
 * EngineRefreshSession createMany
 */
export type EngineRefreshSessionCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many EngineRefreshSessions.
   */
  data: Prisma.EngineRefreshSessionCreateManyInput | Prisma.EngineRefreshSessionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * EngineRefreshSession createManyAndReturn
 */
export type EngineRefreshSessionCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * The data used to create many EngineRefreshSessions.
   */
  data: Prisma.EngineRefreshSessionCreateManyInput | Prisma.EngineRefreshSessionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * EngineRefreshSession update
 */
export type EngineRefreshSessionUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * The data needed to update a EngineRefreshSession.
   */
  data: Prisma.XOR<Prisma.EngineRefreshSessionUpdateInput, Prisma.EngineRefreshSessionUncheckedUpdateInput>;
  /**
   * Choose, which EngineRefreshSession to update.
   */
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
};

/**
 * EngineRefreshSession updateMany
 */
export type EngineRefreshSessionUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update EngineRefreshSessions.
   */
  data: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateManyMutationInput,
    Prisma.EngineRefreshSessionUncheckedUpdateManyInput
  >;
  /**
   * Filter which EngineRefreshSessions to update
   */
  where?: Prisma.EngineRefreshSessionWhereInput;
  /**
   * Limit how many EngineRefreshSessions to update.
   */
  limit?: number;
};

/**
 * EngineRefreshSession updateManyAndReturn
 */
export type EngineRefreshSessionUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * The data used to update EngineRefreshSessions.
   */
  data: Prisma.XOR<
    Prisma.EngineRefreshSessionUpdateManyMutationInput,
    Prisma.EngineRefreshSessionUncheckedUpdateManyInput
  >;
  /**
   * Filter which EngineRefreshSessions to update
   */
  where?: Prisma.EngineRefreshSessionWhereInput;
  /**
   * Limit how many EngineRefreshSessions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * EngineRefreshSession upsert
 */
export type EngineRefreshSessionUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * The filter to search for the EngineRefreshSession to update in case it exists.
   */
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
  /**
   * In case the EngineRefreshSession found by the `where` argument doesn't exist, create a new EngineRefreshSession with this data.
   */
  create: Prisma.XOR<Prisma.EngineRefreshSessionCreateInput, Prisma.EngineRefreshSessionUncheckedCreateInput>;
  /**
   * In case the EngineRefreshSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EngineRefreshSessionUpdateInput, Prisma.EngineRefreshSessionUncheckedUpdateInput>;
};

/**
 * EngineRefreshSession delete
 */
export type EngineRefreshSessionDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
  /**
   * Filter which EngineRefreshSession to delete.
   */
  where: Prisma.EngineRefreshSessionWhereUniqueInput;
};

/**
 * EngineRefreshSession deleteMany
 */
export type EngineRefreshSessionDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which EngineRefreshSessions to delete
   */
  where?: Prisma.EngineRefreshSessionWhereInput;
  /**
   * Limit how many EngineRefreshSessions to delete.
   */
  limit?: number;
};

/**
 * EngineRefreshSession without action
 */
export type EngineRefreshSessionDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the EngineRefreshSession
   */
  select?: Prisma.EngineRefreshSessionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EngineRefreshSession
   */
  omit?: Prisma.EngineRefreshSessionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EngineRefreshSessionInclude<ExtArgs> | null;
};
