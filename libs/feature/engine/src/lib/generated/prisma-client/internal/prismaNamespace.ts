/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from '@prisma/client/runtime/client';
import type * as Prisma from '../models';
import { type PrismaClient } from './class';

export type * from '../models';

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Validator
 */
export const validator = runtime.Public.validator;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>;
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>;
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
  client: string;
  engine: string;
};

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
export const prismaVersion: PrismaVersion = {
  client: '6.9.0',
  engine: '81e4af48011447c3cc503a190e86995b66d2a28e',
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.AnyNull,
};

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
  select: any;
  include: any;
};

type SelectAndOmit = {
  select: any;
  omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
  [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
  ? 'Please either choose `select` or `include`.'
  : T extends SelectAndOmit
    ? 'Please either choose `select` or `omit`.'
    : {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object ? (U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : U) : T;

/**
 * Is T a Record?
 */
type IsObject<T extends any> =
  T extends Array<any>
    ? False
    : T extends Date
      ? False
      : T extends Uint8Array
        ? False
        : T extends BigInt
          ? False
          : T extends object
            ? True
            : False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
  }[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
  1: EitherStrict<O, K>;
  0: EitherLoose<O, K>;
}[strict];

export type Either<O extends object, K extends Key, strict extends Boolean = 1> = O extends unknown
  ? _Either<O, K, strict>
  : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (U extends unknown ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;

export type Overwrite<O extends object, O1 extends object> = {
  [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
  Overwrite<
    U,
    {
      [K in keyof U]-?: At<U, K>;
    }
  >
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
  1: AtStrict<O, K>;
  0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function
  ? A
  : {
      [K in keyof A]: A[K];
    } & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ? (K extends keyof O ? { [P in K]: O[P] } & O : O) | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
    : never
>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
  0: 1;
  1: 0;
}[B];

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
    ? 1
    : 0;

export type Has<U extends Union, U1 extends Union> = Not<Extends<Exclude<U1, U>, U1>>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0;
    1: 1;
  };
  1: {
    0: 1;
    1: 1;
  };
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
  ? {
      [P in keyof T]: P extends keyof O ? O[P] : never;
    }
  : never;

type FieldPaths<T, U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>> = IsObject<T> extends True ? U : T;

export type GetHavingFields<T> = {
  [K in keyof T]: Or<Or<Extends<'OR', K>, Extends<'AND', K>>, Extends<'NOT', K>> extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
      ? never
      : K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>;

export const ModelName = {
  EngineProject: 'EngineProject',
  EngineUser: 'EngineUser',
  migrations_engine: 'migrations_engine',
  EngineRefreshSession: 'EngineRefreshSession',
  EngineEmailTemplate: 'EngineEmailTemplate',
  EngineOAuthProvider: 'EngineOAuthProvider',
  EngineOAuthProviderSettings: 'EngineOAuthProviderSettings',
  EngineOAuthToken: 'EngineOAuthToken',
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<ClientOptions = {}>
  extends runtime.Types.Utils.Fn<
    { extArgs: runtime.Types.Extensions.InternalArgs },
    runtime.Types.Utils.Record<string, any>
  > {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>;
}

export type TypeMap<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions;
  };
  meta: {
    modelProps:
      | 'engineProject'
      | 'engineUser'
      | 'migrations_engine'
      | 'engineRefreshSession'
      | 'engineEmailTemplate'
      | 'engineOAuthProvider'
      | 'engineOAuthProviderSettings'
      | 'engineOAuthToken';
    txIsolationLevel: TransactionIsolationLevel;
  };
  model: {
    EngineProject: {
      payload: Prisma.$EngineProjectPayload<ExtArgs>;
      fields: Prisma.EngineProjectFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EngineProjectFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EngineProjectFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>;
        };
        findFirst: {
          args: Prisma.EngineProjectFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EngineProjectFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>;
        };
        findMany: {
          args: Prisma.EngineProjectFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>[];
        };
        create: {
          args: Prisma.EngineProjectCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>;
        };
        createMany: {
          args: Prisma.EngineProjectCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EngineProjectCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>[];
        };
        delete: {
          args: Prisma.EngineProjectDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>;
        };
        update: {
          args: Prisma.EngineProjectUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>;
        };
        deleteMany: {
          args: Prisma.EngineProjectDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EngineProjectUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EngineProjectUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>[];
        };
        upsert: {
          args: Prisma.EngineProjectUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineProjectPayload>;
        };
        aggregate: {
          args: Prisma.EngineProjectAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEngineProject>;
        };
        groupBy: {
          args: Prisma.EngineProjectGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineProjectGroupByOutputType>[];
        };
        count: {
          args: Prisma.EngineProjectCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineProjectCountAggregateOutputType> | number;
        };
      };
    };
    EngineUser: {
      payload: Prisma.$EngineUserPayload<ExtArgs>;
      fields: Prisma.EngineUserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EngineUserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EngineUserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>;
        };
        findFirst: {
          args: Prisma.EngineUserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EngineUserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>;
        };
        findMany: {
          args: Prisma.EngineUserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>[];
        };
        create: {
          args: Prisma.EngineUserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>;
        };
        createMany: {
          args: Prisma.EngineUserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EngineUserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>[];
        };
        delete: {
          args: Prisma.EngineUserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>;
        };
        update: {
          args: Prisma.EngineUserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>;
        };
        deleteMany: {
          args: Prisma.EngineUserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EngineUserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EngineUserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>[];
        };
        upsert: {
          args: Prisma.EngineUserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineUserPayload>;
        };
        aggregate: {
          args: Prisma.EngineUserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEngineUser>;
        };
        groupBy: {
          args: Prisma.EngineUserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineUserGroupByOutputType>[];
        };
        count: {
          args: Prisma.EngineUserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineUserCountAggregateOutputType> | number;
        };
      };
    };
    migrations_engine: {
      payload: Prisma.$migrations_enginePayload<ExtArgs>;
      fields: Prisma.migrations_engineFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.migrations_engineFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.migrations_engineFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>;
        };
        findFirst: {
          args: Prisma.migrations_engineFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.migrations_engineFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>;
        };
        findMany: {
          args: Prisma.migrations_engineFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>[];
        };
        create: {
          args: Prisma.migrations_engineCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>;
        };
        createMany: {
          args: Prisma.migrations_engineCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.migrations_engineCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>[];
        };
        delete: {
          args: Prisma.migrations_engineDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>;
        };
        update: {
          args: Prisma.migrations_engineUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>;
        };
        deleteMany: {
          args: Prisma.migrations_engineDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.migrations_engineUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.migrations_engineUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>[];
        };
        upsert: {
          args: Prisma.migrations_engineUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_enginePayload>;
        };
        aggregate: {
          args: Prisma.Migrations_engineAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMigrations_engine>;
        };
        groupBy: {
          args: Prisma.migrations_engineGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.Migrations_engineGroupByOutputType>[];
        };
        count: {
          args: Prisma.migrations_engineCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.Migrations_engineCountAggregateOutputType> | number;
        };
      };
    };
    EngineRefreshSession: {
      payload: Prisma.$EngineRefreshSessionPayload<ExtArgs>;
      fields: Prisma.EngineRefreshSessionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EngineRefreshSessionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EngineRefreshSessionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>;
        };
        findFirst: {
          args: Prisma.EngineRefreshSessionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EngineRefreshSessionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>;
        };
        findMany: {
          args: Prisma.EngineRefreshSessionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>[];
        };
        create: {
          args: Prisma.EngineRefreshSessionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>;
        };
        createMany: {
          args: Prisma.EngineRefreshSessionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EngineRefreshSessionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>[];
        };
        delete: {
          args: Prisma.EngineRefreshSessionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>;
        };
        update: {
          args: Prisma.EngineRefreshSessionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>;
        };
        deleteMany: {
          args: Prisma.EngineRefreshSessionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EngineRefreshSessionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EngineRefreshSessionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>[];
        };
        upsert: {
          args: Prisma.EngineRefreshSessionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineRefreshSessionPayload>;
        };
        aggregate: {
          args: Prisma.EngineRefreshSessionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEngineRefreshSession>;
        };
        groupBy: {
          args: Prisma.EngineRefreshSessionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineRefreshSessionGroupByOutputType>[];
        };
        count: {
          args: Prisma.EngineRefreshSessionCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineRefreshSessionCountAggregateOutputType> | number;
        };
      };
    };
    EngineEmailTemplate: {
      payload: Prisma.$EngineEmailTemplatePayload<ExtArgs>;
      fields: Prisma.EngineEmailTemplateFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EngineEmailTemplateFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EngineEmailTemplateFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>;
        };
        findFirst: {
          args: Prisma.EngineEmailTemplateFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EngineEmailTemplateFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>;
        };
        findMany: {
          args: Prisma.EngineEmailTemplateFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>[];
        };
        create: {
          args: Prisma.EngineEmailTemplateCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>;
        };
        createMany: {
          args: Prisma.EngineEmailTemplateCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EngineEmailTemplateCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>[];
        };
        delete: {
          args: Prisma.EngineEmailTemplateDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>;
        };
        update: {
          args: Prisma.EngineEmailTemplateUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>;
        };
        deleteMany: {
          args: Prisma.EngineEmailTemplateDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EngineEmailTemplateUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EngineEmailTemplateUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>[];
        };
        upsert: {
          args: Prisma.EngineEmailTemplateUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineEmailTemplatePayload>;
        };
        aggregate: {
          args: Prisma.EngineEmailTemplateAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEngineEmailTemplate>;
        };
        groupBy: {
          args: Prisma.EngineEmailTemplateGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineEmailTemplateGroupByOutputType>[];
        };
        count: {
          args: Prisma.EngineEmailTemplateCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineEmailTemplateCountAggregateOutputType> | number;
        };
      };
    };
    EngineOAuthProvider: {
      payload: Prisma.$EngineOAuthProviderPayload<ExtArgs>;
      fields: Prisma.EngineOAuthProviderFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EngineOAuthProviderFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EngineOAuthProviderFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>;
        };
        findFirst: {
          args: Prisma.EngineOAuthProviderFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EngineOAuthProviderFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>;
        };
        findMany: {
          args: Prisma.EngineOAuthProviderFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>[];
        };
        create: {
          args: Prisma.EngineOAuthProviderCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>;
        };
        createMany: {
          args: Prisma.EngineOAuthProviderCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EngineOAuthProviderCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>[];
        };
        delete: {
          args: Prisma.EngineOAuthProviderDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>;
        };
        update: {
          args: Prisma.EngineOAuthProviderUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>;
        };
        deleteMany: {
          args: Prisma.EngineOAuthProviderDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EngineOAuthProviderUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EngineOAuthProviderUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>[];
        };
        upsert: {
          args: Prisma.EngineOAuthProviderUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderPayload>;
        };
        aggregate: {
          args: Prisma.EngineOAuthProviderAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEngineOAuthProvider>;
        };
        groupBy: {
          args: Prisma.EngineOAuthProviderGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineOAuthProviderGroupByOutputType>[];
        };
        count: {
          args: Prisma.EngineOAuthProviderCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineOAuthProviderCountAggregateOutputType> | number;
        };
      };
    };
    EngineOAuthProviderSettings: {
      payload: Prisma.$EngineOAuthProviderSettingsPayload<ExtArgs>;
      fields: Prisma.EngineOAuthProviderSettingsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EngineOAuthProviderSettingsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EngineOAuthProviderSettingsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>;
        };
        findFirst: {
          args: Prisma.EngineOAuthProviderSettingsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EngineOAuthProviderSettingsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>;
        };
        findMany: {
          args: Prisma.EngineOAuthProviderSettingsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>[];
        };
        create: {
          args: Prisma.EngineOAuthProviderSettingsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>;
        };
        createMany: {
          args: Prisma.EngineOAuthProviderSettingsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EngineOAuthProviderSettingsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>[];
        };
        delete: {
          args: Prisma.EngineOAuthProviderSettingsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>;
        };
        update: {
          args: Prisma.EngineOAuthProviderSettingsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>;
        };
        deleteMany: {
          args: Prisma.EngineOAuthProviderSettingsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EngineOAuthProviderSettingsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EngineOAuthProviderSettingsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>[];
        };
        upsert: {
          args: Prisma.EngineOAuthProviderSettingsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthProviderSettingsPayload>;
        };
        aggregate: {
          args: Prisma.EngineOAuthProviderSettingsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEngineOAuthProviderSettings>;
        };
        groupBy: {
          args: Prisma.EngineOAuthProviderSettingsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineOAuthProviderSettingsGroupByOutputType>[];
        };
        count: {
          args: Prisma.EngineOAuthProviderSettingsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineOAuthProviderSettingsCountAggregateOutputType> | number;
        };
      };
    };
    EngineOAuthToken: {
      payload: Prisma.$EngineOAuthTokenPayload<ExtArgs>;
      fields: Prisma.EngineOAuthTokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EngineOAuthTokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EngineOAuthTokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>;
        };
        findFirst: {
          args: Prisma.EngineOAuthTokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EngineOAuthTokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>;
        };
        findMany: {
          args: Prisma.EngineOAuthTokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>[];
        };
        create: {
          args: Prisma.EngineOAuthTokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>;
        };
        createMany: {
          args: Prisma.EngineOAuthTokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EngineOAuthTokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>[];
        };
        delete: {
          args: Prisma.EngineOAuthTokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>;
        };
        update: {
          args: Prisma.EngineOAuthTokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>;
        };
        deleteMany: {
          args: Prisma.EngineOAuthTokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EngineOAuthTokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EngineOAuthTokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>[];
        };
        upsert: {
          args: Prisma.EngineOAuthTokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EngineOAuthTokenPayload>;
        };
        aggregate: {
          args: Prisma.EngineOAuthTokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEngineOAuthToken>;
        };
        groupBy: {
          args: Prisma.EngineOAuthTokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineOAuthTokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.EngineOAuthTokenCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EngineOAuthTokenCountAggregateOutputType> | number;
        };
      };
    };
  };
} & {
  other: {
    payload: any;
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
    };
  };
};

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
} as const);

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const EngineProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameLocale: 'nameLocale',
  clientId: 'clientId',
  clientSecret: 'clientSecret',
  public: 'public',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EngineProjectScalarFieldEnum =
  (typeof EngineProjectScalarFieldEnum)[keyof typeof EngineProjectScalarFieldEnum];

export const EngineUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  username: 'username',
  password: 'password',
  roles: 'roles',
  firstname: 'firstname',
  lastname: 'lastname',
  gender: 'gender',
  birthdate: 'birthdate',
  picture: 'picture',
  appData: 'appData',
  revokedAt: 'revokedAt',
  emailVerifiedAt: 'emailVerifiedAt',
  phoneVerifiedAt: 'phoneVerifiedAt',
  timezone: 'timezone',
  lang: 'lang',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EngineUserScalarFieldEnum = (typeof EngineUserScalarFieldEnum)[keyof typeof EngineUserScalarFieldEnum];

export const Migrations_engineScalarFieldEnum = {
  installed_rank: 'installed_rank',
  version: 'version',
  description: 'description',
  type: 'type',
  script: 'script',
  checksum: 'checksum',
  installed_by: 'installed_by',
  installed_on: 'installed_on',
  execution_time: 'execution_time',
  success: 'success',
} as const;

export type Migrations_engineScalarFieldEnum =
  (typeof Migrations_engineScalarFieldEnum)[keyof typeof Migrations_engineScalarFieldEnum];

export const EngineRefreshSessionScalarFieldEnum = {
  id: 'id',
  refreshToken: 'refreshToken',
  userAgent: 'userAgent',
  fingerprint: 'fingerprint',
  userIp: 'userIp',
  expiresAt: 'expiresAt',
  userData: 'userData',
  enabled: 'enabled',
  userId: 'userId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EngineRefreshSessionScalarFieldEnum =
  (typeof EngineRefreshSessionScalarFieldEnum)[keyof typeof EngineRefreshSessionScalarFieldEnum];

export const EngineEmailTemplateScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  subjectLocale: 'subjectLocale',
  text: 'text',
  textLocale: 'textLocale',
  html: 'html',
  htmlLocale: 'htmlLocale',
  operationName: 'operationName',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EngineEmailTemplateScalarFieldEnum =
  (typeof EngineEmailTemplateScalarFieldEnum)[keyof typeof EngineEmailTemplateScalarFieldEnum];

export const EngineOAuthProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EngineOAuthProviderScalarFieldEnum =
  (typeof EngineOAuthProviderScalarFieldEnum)[keyof typeof EngineOAuthProviderScalarFieldEnum];

export const EngineOAuthProviderSettingsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  providerId: 'providerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EngineOAuthProviderSettingsScalarFieldEnum =
  (typeof EngineOAuthProviderSettingsScalarFieldEnum)[keyof typeof EngineOAuthProviderSettingsScalarFieldEnum];

export const EngineOAuthTokenScalarFieldEnum = {
  id: 'id',
  grantedAt: 'grantedAt',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  tokenType: 'tokenType',
  scope: 'scope',
  verificationCode: 'verificationCode',
  userId: 'userId',
  projectId: 'projectId',
  providerId: 'providerId',
  providerUserId: 'providerUserId',
  providerUserData: 'providerUserData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EngineOAuthTokenScalarFieldEnum =
  (typeof EngineOAuthTokenScalarFieldEnum)[keyof typeof EngineOAuthTokenScalarFieldEnum];

export const SortOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull,
} as const;

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput];

export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull,
} as const;

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

export const NullsOrder = {
  first: 'first',
  last: 'last',
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>;

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>;

/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>;

/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>;

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>;

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>;

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>;

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number;
};

export type Datasource = {
  url?: string;
};
export type Datasources = {
  db?: Datasource;
};

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
  'define',
  TypeMapCb,
  runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal';
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources;
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string;
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat;
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   *
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[];
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number;
    timeout?: number;
    isolationLevel?: TransactionIsolationLevel;
  };
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null;
  /**
   * Global configuration for omitting model fields by default.
   *
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
  engineProject?: Prisma.EngineProjectOmit;
  engineUser?: Prisma.EngineUserOmit;
  migrations_engine?: Prisma.migrations_engineOmit;
  engineRefreshSession?: Prisma.EngineRefreshSessionOmit;
  engineEmailTemplate?: Prisma.EngineEmailTemplateOmit;
  engineOAuthProvider?: Prisma.EngineOAuthProviderOmit;
  engineOAuthProviderSettings?: Prisma.EngineOAuthProviderSettingsOmit;
  engineOAuthToken?: Prisma.EngineOAuthTokenOmit;
};

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error';
export type LogDefinition = {
  level: LogLevel;
  emit: 'stdout' | 'event';
};

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition
  ? T['emit'] extends 'event'
    ? T['level']
    : never
  : never;
export type GetEvents<T extends any> =
  T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never;

export type QueryEvent = {
  timestamp: Date;
  query: string;
  params: string;
  duration: number;
  target: string;
};

export type LogEvent = {
  timestamp: Date;
  message: string;
  target: string;
};
/* End Types for Logging */

export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy';

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName;
  action: PrismaAction;
  args: any;
  dataPath: string[];
  runInTransaction: boolean;
};

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>;

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>;
