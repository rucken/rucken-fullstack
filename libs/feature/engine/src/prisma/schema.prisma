generator client {
  provider = "prisma-client"
  
  output   = "../../../../../libs/feature/engine/src/lib/generated/prisma-client"
  
  previewFeatures = ["queryCompiler","driverAdapters"]
  
  moduleFormat = "cjs"
  
  
}
datasource db {
  provider          = "postgres"
  url               = env("RUCKEN_ENGINE_DATABASE_URL")
}
generator prismaClassGenerator {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../lib/generated/rest/dto"
  annotateAllDtoProperties        = "true"
  classValidation                 = "true"
  createDtoPrefix                 = "Create"
  definiteAssignmentAssertion     = "true"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  exportRelationModifierClasses   = "true"
  fileNamingStyle                 = "kebab"
  flatResourceStructure           = "false"
  noDependencies                  = "false"
  outputToNestJsResourceStructure = "false"
  prettier                        = "true"
  reExport                        = "false"
  updateDtoPrefix                 = "Update"
}

model EngineProject {
  /// @DtoCreateHidden
  id                                                      String              @id(map: "PK_ENGINE_PROJECTS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                                    String              @db.VarChar(255)
  nameLocale                                              Json?
  clientId                                                String              @unique(map: "UQ_ENGINE_PROJECTS__CLIENT_ID") @db.VarChar(100)
  clientSecret                                            String              @db.VarChar(255)
  public                                                  Boolean
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt                                               DateTime            @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt                                               DateTime            @default(now()) @db.Timestamp(6)
  EngineEmailTemplate                                        EngineEmailTemplate[]
  EngineOAuthToken_EngineOAuthToken_projectIdToEngineOAuthProvider EngineOAuthToken[]     @relation("EngineOAuthToken_projectIdToEngineOAuthProvider")
  EngineRefreshSession                                       EngineRefreshSession[]
  EngineUser                                                 EngineUser[]

  @@index([public], map: "IDX_ENGINE_PROJECTS__PUBLIC")
}

model EngineUser {
  /// @DtoCreateHidden
  id                String              @id(map: "PK_ENGINE_USERS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email             String              @db.VarChar(255)
  phone             String?             @db.VarChar(255)
  username          String?             @db.VarChar(255)
  /// @DtoEntityHidden
  password          String              @db.VarChar(255)
  roles             String?             @db.VarChar(255)
  firstname         String?             @db.VarChar(255)
  lastname          String?             @db.VarChar(255)
  gender            String?             @db.VarChar(1)
  birthdate         DateTime?           @db.Timestamp(6)
  picture           String?
  appData           Json?
  revokedAt         DateTime?           @db.Timestamp(6)
  emailVerifiedAt   DateTime?           @db.Timestamp(6)
  phoneVerifiedAt   DateTime?           @db.Timestamp(6)
  timezone          Float?
  lang              String?             @db.VarChar(2)
  projectId         String              @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  EngineOAuthToken     EngineOAuthToken[]
  EngineRefreshSession EngineRefreshSession[]
  EngineProject        EngineProject          @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_USERS__PROJECT_ID")

  @@unique([email, projectId], map: "UQ_ENGINE_USERS__EMAIL")
  @@unique([username, projectId], map: "UQ_ENGINE_USERS__USERNAME")
  @@index([projectId], map: "IDX_ENGINE_USERS__PROJECT_ID")
}

model migrations_engine {
  installed_rank Int      @id(map: "__migrations_engine_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "__migrations_engine_s_idx")
  @@map("__migrations_engine")
}

model EngineRefreshSession {
  /// @DtoCreateHidden
  id           String     @id(map: "PK_ENGINE_REFRESH_SESSIONS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @DtoEntityHidden
  refreshToken String     @db.Uuid
  userAgent    String?    @db.VarChar(255)
  /// @DtoEntityHidden
  fingerprint  String?    @db.VarChar(255)
  userIp       String?    @db.VarChar(128)
  expiresAt    DateTime?  @db.Timestamp(6)
  userData     Json?
  enabled      Boolean
  userId       String     @db.Uuid
  projectId    String     @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt    DateTime   @default(now()) @db.Timestamp(6)
  EngineProject   EngineProject @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_REFRESH_SESSIONS__PROJECT_ID")
  EngineUser      EngineUser    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_REFRESH_SESSIONS__USER_ID")

  @@index([userId, projectId], map: "IDX_ENGINE_REFRESH_SESSIONS_USER_ID")
  @@index([projectId], map: "IDX_ENGINE_REFRESH_SESSIONS__PROJECT_ID")
}

model EngineEmailTemplate {
  /// @DtoCreateHidden
  id            String     @id(map: "PK_ENGINE_EMAIL_TEMPLATES") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subject       String
  subjectLocale Json?
  text          String
  textLocale    Json?
  html          String
  htmlLocale    Json?
  operationName String?    @db.VarChar(128)
  projectId     String     @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt     DateTime   @default(now()) @db.Timestamp(6)
  EngineProject    EngineProject @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_EMAIL_TEMPLATES__PROJECT_ID")

  @@unique([projectId, operationName], map: "UQ_ENGINE_EMAIL_TEMPLATES__OPERATION_NAME")
  @@index([projectId], map: "IDX_ENGINE_EMAIL_TEMPLATES__PROJECT_ID")
}

model EngineOAuthProvider {
  /// @DtoCreateHidden
  id                       String                     @id(map: "PK_ENGINE_OAUTH_PROVIDER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                     String                     @unique(map: "UQ_ENGINE_OAUTH_PROVIDER__NAME") @db.VarChar(255)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt                DateTime                   @default(now()) @db.Timestamp(6)
  EngineOAuthProviderSettings EngineOAuthProviderSettings[]
  EngineOAuthToken            EngineOAuthToken[]
}

model EngineOAuthProviderSettings {
  /// @DtoCreateHidden
  id               String           @id(map: "PK_ENGINE_OAUTH_PROVIDER_SETTINGS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String           @db.VarChar(255)
  value            String
  providerId       String           @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt        DateTime         @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt        DateTime         @default(now()) @db.Timestamp(6)
  EngineOAuthProvider EngineOAuthProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_OAUTH_PROVIDER_SETTINGS__PROVIDER_ID")

  @@unique([providerId, name], map: "UQ_ENGINE_OAUTH_PROVIDER_SETTINGS__NAME")
  @@index([providerId], map: "IDX_ENGINE_OAUTH_PROVIDER_SETTINGS__PROVIDER_ID")
}

model EngineOAuthToken {
  /// @DtoCreateHidden
  id                                                         String           @id(map: "PK_ENGINE_OAUTH_TOKENS_SETTINGS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  grantedAt                                                  DateTime         @default(now()) @db.Timestamp(6)
  /// @DtoEntityHidden
  accessToken                                                String           @db.VarChar(512)
  /// @DtoEntityHidden
  refreshToken                                               String?          @db.VarChar(512)
  expiresAt                                                  DateTime?        @db.Timestamp(6)
  tokenType                                                  String?          @db.VarChar(255)
  scope                                                      String?          @db.VarChar(512)
  verificationCode                                           String?          @db.VarChar(512)
  userId                                                     String           @db.Uuid
  projectId                                                  String           @db.Uuid
  providerId                                                 String           @db.Uuid
  providerUserId                                             String           @db.VarChar(512)
  providerUserData                                           Json?
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt                                                  DateTime         @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt                                                  DateTime         @default(now()) @db.Timestamp(6)
  EngineOAuthProvider_EngineOAuthToken_projectIdToEngineOAuthProvider EngineProject       @relation("EngineOAuthToken_projectIdToEngineOAuthProvider", fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_OAUTH_TOKENS__PROJECT_ID")
  EngineOAuthProvider                                           EngineOAuthProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_OAUTH_TOKENS__PROVIDER_ID")
  EngineUser                                                    EngineUser          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ENGINE_OAUTH_TOKENS__USER_ID")

  @@unique([providerId, projectId, userId, accessToken], map: "UQ_ENGINE_OAUTH_TOKENS__NAME")
  @@index([projectId], map: "IDX_ENGINE_OAUTH_TOKENS__PROJECT_ID")
  @@index([providerId], map: "IDX_ENGINE_OAUTH_TOKENS__PROVIDER_ID")
  @@index([userId], map: "IDX_ENGINE_OAUTH_TOKENS__USER_ID")
}
