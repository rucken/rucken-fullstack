version: '3'
networks:
  nestjs-mod-sso-network:
    driver: 'bridge'
services:
  nestjs-mod-sso-postgre-sql:
    image: 'bitnami/postgresql:15.5.0'
    container_name: 'nestjs-mod-sso-postgre-sql'
    networks:
      - 'nestjs-mod-sso-network'
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'pg_isready -U postgres'
      interval: '5s'
      timeout: '5s'
      retries: 5
    tty: true
    restart: 'always'
    environment:
      POSTGRESQL_USERNAME: '${SINGLE_SIGN_ON_POSTGRE_SQL_POSTGRESQL_USERNAME}'
      POSTGRESQL_PASSWORD: '${SINGLE_SIGN_ON_POSTGRE_SQL_POSTGRESQL_PASSWORD}'
      POSTGRESQL_DATABASE: '${SINGLE_SIGN_ON_POSTGRE_SQL_POSTGRESQL_DATABASE}'
    volumes:
      - 'nestjs-mod-sso-postgre-sql-volume:/bitnami/postgresql'
  nestjs-mod-sso-minio:
    image: 'bitnami/minio:2024.11.7'
    container_name: 'nestjs-mod-sso-minio'
    volumes:
      - 'nestjs-mod-sso-minio-volume:/bitnami/minio/data'
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - 'nestjs-mod-sso-network'
    environment:
      MINIO_ROOT_USER: '${SINGLE_SIGN_ON_MINIO_MINIO_ROOT_USER}'
      MINIO_ROOT_PASSWORD: '${SINGLE_SIGN_ON_MINIO_MINIO_ROOT_PASSWORD}'
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'mc'
        - 'ready'
        - 'local'
      interval: '5s'
      timeout: '5s'
      retries: 5
    tty: true
    restart: 'always'
  nestjs-mod-sso-redis:
    image: 'bitnami/redis:7.4.1'
    container_name: 'nestjs-mod-sso-redis'
    volumes:
      - 'nestjs-mod-sso-redis-volume:/bitnami/redis/data'
    ports:
      - '6379:6379'
    networks:
      - 'nestjs-mod-sso-network'
    environment:
      REDIS_DATABASE: '0'
      REDIS_PASSWORD: '${SINGLE_SIGN_ON_REDIS_REDIS_PASSWORD}'
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'redis-cli --no-auth-warning -a $$REDIS_PASSWORD ping | grep PONG'
      interval: '5s'
      timeout: '5s'
      retries: 5
    tty: true
    restart: 'always'
  nestjs-mod-sso-server:
    image: nestjs-mod-sso
    build:
      dockerfile: ./.docker/server.Dockerfile
      context: ..
    container_name: 'nestjs-mod-sso-server'
    ports:
      - '${SINGLE_SIGN_ON_PORT}:${SINGLE_SIGN_ON_PORT}'
    networks:
      - 'nestjs-mod-sso-network'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          './node_modules/.bin/wait-on --timeout= --interval=1000 --window --verbose --log http://localhost:${SINGLE_SIGN_ON_PORT}/api/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
    tty: true
    environment:
      ENV COREPACK_ENABLE_DOWNLOAD_PROMPT: '0'
      NODE_TLS_REJECT_UNAUTHORIZED: '0'
      SINGLE_SIGN_ON_PORT: '${SINGLE_SIGN_ON_PORT}'
      SINGLE_SIGN_ON_SSO_ADMIN_SECRET: '${SINGLE_SIGN_ON_SSO_ADMIN_SECRET}'
      SINGLE_SIGN_ON_WEBHOOK_DATABASE_URL: '${SINGLE_SIGN_ON_WEBHOOK_DATABASE_URL}'
      SINGLE_SIGN_ON_SSO_DATABASE_URL: '${SINGLE_SIGN_ON_SSO_DATABASE_URL}'
      SINGLE_SIGN_ON_NOTIFICATIONS_DATABASE_URL: '${SINGLE_SIGN_ON_NOTIFICATIONS_DATABASE_URL}'
      SINGLE_SIGN_ON_TWO_FACTOR_DATABASE_URL: '${SINGLE_SIGN_ON_TWO_FACTOR_DATABASE_URL}'
      SINGLE_SIGN_ON_SSO_ADMIN_EMAIL: '${SINGLE_SIGN_ON_SSO_ADMIN_EMAIL}'
      SINGLE_SIGN_ON_SSO_ADMIN_USERNAME: '${SINGLE_SIGN_ON_SSO_ADMIN_USERNAME}'
      SINGLE_SIGN_ON_SSO_ADMIN_PASSWORD: '${SINGLE_SIGN_ON_SSO_ADMIN_PASSWORD}'
      SINGLE_SIGN_ON_MINIO_SERVER_HOST: '${SINGLE_SIGN_ON_MINIO_SERVER_HOST}'
      SINGLE_SIGN_ON_MINIO_ACCESS_KEY: '${SINGLE_SIGN_ON_MINIO_ACCESS_KEY}'
      SINGLE_SIGN_ON_MINIO_SECRET_KEY: '${SINGLE_SIGN_ON_MINIO_SECRET_KEY}'
      SINGLE_SIGN_ON_KEYV_URL: '${SINGLE_SIGN_ON_KEYV_URL}'
      SINGLE_SIGN_ON_SSO_SERVER_URL: '${SINGLE_SIGN_ON_SSO_SERVER_URL}'
      SINGLE_SIGN_ON_SSO_JWT_ACCESS_TOKEN_EXPIRES_IN: '${SINGLE_SIGN_ON_SSO_JWT_ACCESS_TOKEN_EXPIRES_IN}'
      SINGLE_SIGN_ON_SSO_JWT_REFRESH_TOKEN_EXPIRES_IN: '${SINGLE_SIGN_ON_SSO_JWT_REFRESH_TOKEN_EXPIRES_IN}'
      SINGLE_SIGN_ON_SSO_DEFAULT_PUBLIC_PROJECTS: '${SINGLE_SIGN_ON_SSO_DEFAULT_PUBLIC_PROJECTS}'
      SINGLE_SIGN_ON_SSO_DEFAULT_PROJECT: '${SINGLE_SIGN_ON_SSO_DEFAULT_PROJECT}'
      SINGLE_SIGN_ON_ROOT_DATABASE_URL: '${SINGLE_SIGN_ON_ROOT_DATABASE_URL}'
      SINGLE_SIGN_ON_SSO_CLIENT_URL: '${SINGLE_SIGN_ON_SSO_CLIENT_URL}'
      SINGLE_SIGN_ON_SSO_GOOGLE_OAUTH_CLIENT_ID: '${SINGLE_SIGN_ON_SSO_GOOGLE_OAUTH_CLIENT_ID}'
      SINGLE_SIGN_ON_SSO_GOOGLE_OAUTH_CLIENT_SECRET_KEY: '${SINGLE_SIGN_ON_SSO_GOOGLE_OAUTH_CLIENT_SECRET_KEY}'
      SINGLE_SIGN_ON_CLIENT_MINIO_URL: '${SINGLE_SIGN_ON_CLIENT_MINIO_URL}'
    restart: 'always'
    depends_on:
      nestjs-mod-sso-minio:
        condition: 'service_started'
      nestjs-mod-sso-redis:
        condition: 'service_healthy'
      nestjs-mod-sso-postgre-sql:
        condition: service_healthy
volumes:
  nestjs-mod-sso-postgre-sql-volume:
    name: 'nestjs-mod-sso-postgre-sql-volume'
  nestjs-mod-sso-minio-volume:
    name: 'nestjs-mod-sso-minio-volume'
  nestjs-mod-sso-redis-volume:
    name: 'nestjs-mod-sso-redis-volume'
# docker system prune --all
# docker compose -f ./docker-compose-full.yml --env-file ./docker-compose-full.env --compatibility up -d
# docker compose -f ./docker-compose-full.yml --env-file ./docker-compose-full.env --compatibility up -d --no-build
